{"version":3,"sources":["../../src/controllers/user.js"],"names":["config","db","api","get","req","res","find","email","params","altemail","err","altid","status","send","findById","user","realid","id","realemail","json","post","newUser","body","save","message","newAltID","altids","push"],"mappings":"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","file":"user.js","sourcesContent":["////////////////////////////////////////\n// ADFSUserMappingAPI\n//\n// Copyright (c) 2017 Jonathan Hardison\n// /controllers/user.js\n///////////////////////////////////////\n\nimport mongoose from 'mongoose';\nimport express from 'express';\nimport {Router} from 'express';\nimport User from '../models/user';\nimport Altid from '../models/altid';\n\n\nexport default({ config, db}) => {\n    let api = Router();\n    \n    // general get from alternate email address input  \n    api.get('/altid/email/:altemail', (req, res) => {\n        Altid.find({email: req.params.altemail}, (err, altid) =>{\n            if(err){\n                res.status(500).send(err);\n            }\n\n            User.findById(altid[0].user, (err, user) =>{\n                if(err){\n                    res.status(500).send(err);\n                }\n                res.status(200).send(user.realid);\n            });\n            \n        }) \n    });\n\n    // general get from alternate email by id\n    api.get('/altid/:id', (req, res) => {\n        Altid.findById(req.params.id, (err, altid) =>{\n            if(err){\n                res.status(500).send(err);\n            }\n            res.status(200).send(altid.realid);\n        }) \n    });\n    \n    // general get from real email address input\n    api.get('/email/:realemail', (req, res) => {\n        User.find({realid: req.params.realemail}, (err, user) =>{\n            if(err){\n                res.status(500).send(err);\n            }\n            res.status(200).json(user);\n        }) \n    });\n\n    // general get from real email address input with ID\n    api.get('/:id', (req, res) => {\n        User.findById(req.params.realemail, (err, user) =>{\n            if(err){\n                res.status(500).send(err);\n            }\n            res.status(200).json(user);\n        }) \n    });\n\n    // general post to stage some users\n    api.post('/', (req, res) => {\n        let newUser = new User();\n        newUser.realid = req.body.realid;\n\n        newUser.save(err => {\n            if(err){\n                res.status(500).send(err);\n            }\n            res.status(200).json({message: \"Real user created successfully\"});\n        });\n    });\n\n    // general post to stage some alt id's\n    api.post('/altid/:realid', (req, res) => {\n        User.findById(req.params.realid, (err, user) => {\n            if(err){\n                res.status(500).send(err);\n            }\n            let newAltID = new Altid();\n            newAltID.email = req.body.email;\n            newAltID.user = user.id;\n\n            newAltID.save((err, altid) => {\n            if(err){\n                res.status(500).send(err);\n            }\n            user.altids.push(newAltID);\n            user.save(err => {\n                if(err){\n                    res.status(500).send(err);\n                }\n                res.status(200).json({message: \"Alt ID created successfully\"});\n                }); \n            });\n        });\n    });\n\n\n\n    return api;\n}"]}