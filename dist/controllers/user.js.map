{"version":3,"sources":["../../src/controllers/user.js"],"names":["config","db","api","get","req","res","find","email","params","altemail","err","altid","status","send","length","findById","user","realid","id","realemail","json","post","newUser","body","save","message","newAltID","altids","push"],"mappings":"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","file":"user.js","sourcesContent":["////////////////////////////////////////\n// ADFSUserMappingAPI\n//\n// Copyright (c) 2017 Jonathan Hardison\n// /controllers/user.js\n///////////////////////////////////////\n\nimport mongoose from 'mongoose';\nimport express from 'express';\nimport {Router} from 'express';\nimport User from '../models/user';\nimport Altid from '../models/altid';\n\n\nexport default({ config, db}) => {\n    let api = Router();\n    \n    // general get from alternate email address input  \n    api.get('/altid/email/:altemail', (req, res) => {\n        Altid.find({email: req.params.altemail}, (err, altid) =>{\n            if(err){\n                res.status(500).send(err);\n            }\n\n            if((typeof altid !== \"undefined\") && (altid.length > 0)){\n                User.findById(altid[0].user, (err, user) =>{\n                    if(err){\n                        res.status(500).send(err);\n                    }\n                    res.status(200).send(user.realid);\n                });\n            }\n            else{\n                res.status(200).send(req.params.altemail);\n            }\n            \n        }) \n    });\n\n    // general get from alternate email by id\n    api.get('/altid/:id', (req, res) => {\n        Altid.findById(req.params.id, (err, altid) =>{\n            if(err){\n                res.status(500).send(err);\n            }\n            res.status(200).send(altid.realid);\n        }) \n    });\n    \n    // general get from real email address input\n    api.get('/email/:realemail', (req, res) => {\n        User.find({realid: req.params.realemail}, (err, user) =>{\n            if(err){\n                res.status(500).send(err);\n            }\n            res.status(200).json(user);\n        }) \n    });\n\n    // general get from real email address input with ID\n    api.get('/:id', (req, res) => {\n        User.findById(req.params.realemail, (err, user) =>{\n            if(err){\n                res.status(500).send(err);\n            }\n            res.status(200).json(user);\n        }) \n    });\n\n    // general post to stage some users\n    api.post('/', (req, res) => {\n        let newUser = new User();\n        newUser.realid = req.body.realid;\n\n        newUser.save(err => {\n            if(err){\n                res.status(500).send(err);\n            }\n            res.status(200).json({message: \"Real user created successfully\"});\n        });\n    });\n\n    // general post to stage some alt id's\n    api.post('/altid/:realid', (req, res) => {\n        User.findById(req.params.realid, (err, user) => {\n            if(err){\n                res.status(500).send(err);\n            }\n            let newAltID = new Altid();\n            newAltID.email = req.body.email;\n            newAltID.user = user.id;\n\n            newAltID.save((err, altid) => {\n            if(err){\n                res.status(500).send(err);\n            }\n            user.altids.push(newAltID);\n            user.save(err => {\n                if(err){\n                    res.status(500).send(err);\n                }\n                res.status(200).json({message: \"Alt ID created successfully\"});\n                }); \n            });\n        });\n    });\n\n\n\n    return api;\n}"]}