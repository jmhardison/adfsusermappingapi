{"version":3,"sources":["../../src/controllers/user.js"],"names":["config","db","api","get","req","res","find","email","params","altemail","err","altid","status","send","realid","post","newUser","body","save","json","message","realemail","user","newAltID","id"],"mappings":";;;;;;AAOA;;;;AACA;;;;AAEA;;;;AACA;;;;;;kBAGc,gBAAmB;AAAA,QAAhBA,MAAgB,QAAhBA,MAAgB;AAAA,QAARC,EAAQ,QAARA,EAAQ;;AAC7B,QAAIC,MAAM,sBAAV;;AAEA;AACAA,QAAIC,GAAJ,CAAQ,YAAR,EAAsB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAChC,wBAAMC,IAAN,CAAW,EAACC,OAAOH,IAAII,MAAJ,CAAWC,QAAnB,EAAX,EAAyC,UAACC,GAAD,EAAMC,KAAN,EAAe;AACpD,gBAAGD,GAAH,EAAO;AACHL,oBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBH,GAArB;AACH;AACDL,gBAAIQ,IAAJ,CAASF,MAAMG,MAAf;AACH,SALD;AAMH,KAPD;;AAUA;AACAZ,QAAIa,IAAJ,CAAS,GAAT,EAAc,UAACX,GAAD,EAAMC,GAAN,EAAc;AACxB,YAAIW,UAAU,oBAAd;AACAA,gBAAQF,MAAR,GAAiBV,IAAIa,IAAJ,CAASH,MAA1B;;AAEAE,gBAAQE,IAAR,CAAa,eAAO;AAChB,gBAAGR,GAAH,EAAO;AACHL,oBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBH,GAArB;AACH;AACDL,gBAAIO,MAAJ,CAAW,GAAX,EAAgBO,IAAhB,CAAqB,EAACC,SAAS,gCAAV,EAArB;AACH,SALD;AAMH,KAVD;;AAYA;AACAlB,QAAIa,IAAJ,CAAS,mBAAT,EAA8B,UAACX,GAAD,EAAMC,GAAN,EAAc;AACxC,uBAAKC,IAAL,CAAU,EAACQ,QAAQV,IAAII,MAAJ,CAAWa,SAApB,EAAV,EAA0C,UAACX,GAAD,EAAMY,IAAN,EAAe;AACrD,gBAAGZ,GAAH,EAAO;AACHL,oBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBH,GAArB;AACH;AACD,gBAAIa,WAAW,qBAAf;AACAA,qBAAShB,KAAT,GAAiBH,IAAIa,IAAJ,CAASV,KAA1B;AACAgB,qBAAST,MAAT,GAAkBQ,KAAKE,EAAvB;;AAEAD,qBAASL,IAAT,CAAc,eAAO;AACrB,oBAAGR,GAAH,EAAO;AACHL,wBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBH,GAArB;AACH;AACDL,oBAAIO,MAAJ,CAAW,GAAX,EAAgBO,IAAhB,CAAqB,EAACC,SAAS,6BAAV,EAArB;AACH,aALG;AAOH,SAfD;AAiBH,KAlBD;;AAsBA,WAAOlB,GAAP;AACH,C,EAjED;AACA;AACA;AACA;AACA;AACA","file":"user.js","sourcesContent":["////////////////////////////////////////\n// ADFSUserMappingAPI\n//\n// Copyright (c) 2017 Jonathan Hardison\n// /controllers/user.js\n///////////////////////////////////////\n\nimport mongoose from 'mongoose';\nimport express from 'express';\nimport {Router} from 'express';\nimport User from '../models/user';\nimport Altid from '../models/altid';\n\n\nexport default({ config, db}) => {\n    let api = Router();\n    \n    // general get from alternate email address input\n    api.get('/:altemail', (req, res) => {\n        Altid.find({email: req.params.altemail}, (err, altid) =>{\n            if(err){\n                res.status(500).send(err);\n            }\n            res.send(altid.realid);\n        }) \n    });\n    \n\n    // general post to stage some users\n    api.post('/', (req, res) => {\n        let newUser = new User();\n        newUser.realid = req.body.realid;\n\n        newUser.save(err => {\n            if(err){\n                res.status(500).send(err);\n            }\n            res.status(200).json({message: \"Real user created successfully\"});\n        });\n    });\n\n    // general post to stage some alt id's\n    api.post('/altid/:realemail', (req, res) => {\n        User.find({realid: req.params.realemail}, (err, user) => {\n            if(err){\n                res.status(500).send(err);\n            }\n            let newAltID = new Altid();\n            newAltID.email = req.body.email;\n            newAltID.realid = user.id;\n\n            newAltID.save(err => {\n            if(err){\n                res.status(500).send(err);\n            }\n            res.status(200).json({message: \"Alt ID created successfully\"});\n        });\n\n        })\n        \n    });\n\n\n\n    return api;\n}"]}